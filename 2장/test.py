'''
2장

이미지의 구조 : 픽셀들의 집합 (작은 사각형의 모자이크)
해상도 : 이미지가 보유하고 있는 픽셀의 양 (1980 x 1080 : 1980픽셀 너비 1080픽셀 높이)
이미지 해상도에 영향을 주는 요소
- 카메라의 센서 사이즈 : 큰 센서 일수록 더 많은 픽셀 수용 가능
- 스캐너의 정밀도 : 물리적 미디어를 디지털화할 때 스캐너의 정밀도와 품질에 의해 결정
(책, 사진, 필름, 음반 등과 같은 아날로그 형식의 자료를 컴퓨터에서 읽을 수 있는 디지털 형식으로 변환하는 과정)
픽셀 밀도 : 인치당 픽셀 수(PPI)
서브 픽셀 : 화면의 픽셀을 구성하는 작은 컬러 요소
(일반적으로 RGB 방식의 디스플레이에서는 각 픽셀이 빨강, 초록, 파랑의 서브 픽셀로 나뉘어 있고, 하나의 픽셀은 이 세 가지 색상의 서브 픽셀이 결합되어 다양한 색상을 만들어냄)

이미지 압축
- 효율적 훈련 : I/O 오버헤드를 줄여주어 프로세스 속도가 빨라짐
- 전송 시간 감소
- 컴퓨터 비전 모델 성능 향상 : 압축으로부터의 왜곡을 학습하여 품질이 저하한 이미지의 패턴을 인식하도록 학습
무손실 압축 : 정보의 손실없이 데이터 사이즈를 줄임
*PNG 휴대용 네트워크 그래픽
 - 디플레이트 알고리즘 사용
(디플레이트 : LZ77 - 반복되는 시퀀스는 이전 시퀀스의 참조로 대체, 허프만 코딩 알고리즘 사용 - 빈도가 높은 값을 더 짧은 코드에 할당)
손실 압축 : 원본 데이터가 일부 손실되는 압축
*JPEG
- RGB -> YCbCr Y:휘도 Cb,Cr:색차
- 양자화 : 복잡한 픽셀의 패턴을 단순화, 이 과정에서 손실 발생
- 엔트로피 코딩 : 허프만 코딩과 같은 방법을 이용해 효율적으로 저장
=> PNG로 작업 후 최종 결과물 배포를 위해 JPEG로 저장

색공간
- 그레이 스케일 : 밝기를 나타내는 값
- RGB : 빨간색 채널, 초록색 채널, 파란색 채널로 구성
- CMYK : 빛을 빼는 원리로 작동 (인쇄물의 경우에 사용)
- HSV : Hue 색조, Saturation 채도, Value 값,밝기
- 비트 : 0 or 1
- 비트 심도 : 비트 값에 따라 표현가능한 값의 개수가 달라짐

텐서 이미지 표현
'''
url = 'https://cobslab.com/wp-content/uploads/2022/02/ai-009-1.jpg'
import tensorflow as tf
image_path = tf.keras.utils.get_file('/content/image.jpg', origin=url) # 이미지 다운
image = tf.io.read_file(image_path) # 이미지 불러오기

image = tf.image.decode_jpeg(image, channels = 3) # 바이너리 문자열을 숫자 텐서로 디코딩


import matplotlib.pyplot as plt # 이미지 표시
plt.imshow(image)
plt.axis('off')
plt.show()

'''
정규화 : 픽셀 값을 [0,1] 범위로 스케일링
표준화 : 픽셀 평균 0, 표준편차 1이 되도록 스케일링

이미지 필터링
선형 필터 : 출력이 입력 값의 선형 조합, 출력은 입력 이미지 픽셀의 가중치 합
- 가우시안 필터링 : 이미지에 블러 효과를 부여하는 ㅂ아법
비선형 필터 : 특정 조건이나 규칙에 따라 값을 선택하거나 변경
- 중앙 값 필터링 : 노이즈 감소, 특히 소금과 후추 노이즈
'''